"""
13.1 数组的存储顺序

在创建数组时，我们可以通过order参数来指定数组元素的存储顺序，存储顺序分为四种：
1. C行优先/行主顺序
2. F列优先/列主顺序
3. K元素在内存中的出现顺序
4. A原顺序
"""
import numpy as np

x = np.array(range(1, 13)).reshape((3, 4), order="C")
print(x)

y = np.array(range(1, 13)).reshape((3, 4), order="F")
print(y)
"""
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
 
[[ 1  4  7 10]
 [ 2  5  8 11]
 [ 3  6  9 12]]
"""

"""
练习：
1. 直接使用array方法创建一个多维数组(如：2 * 2)，order分别置为C和F，二者会有不同吗？
2. 创建一个2*3（3*2）的数组，将其reshape为3*2（2*3），order分别置为C与F，解释结果。
"""
x = np.array([[1, 2], [3, 4], [5, 6]], order="C")
print(x)
"""
[[1 2]
 [3 4]
 [5 6]]
"""

y = np.array([[1, 2], [3, 4], [5, 6]], order="F")
print(y)
"""
[[1 2]
 [3 4]
 [5 6]]
"""
"""
解释：order影响两个方面：
1. 数据的抽取（扁平化处理）
2. 数据构建（数组填充）的顺序
"""

"""
重点理解:
我们在创建数组的时候，在读取（解析）现有的数据顺序，以及创建新的数据结构上，都会使用order指定的顺序。
可以简单地认为，我们先使用指定的order顺序将原数组扁平化处理，然后再使用指定的order顺序去构建新的数组。
（向新的数组中插入值）
"""
y = np.array([[1, 2, 3], [4, 5, 6]])
print(y)
y = y.reshape(3, 2, order="C")
print(y)
"""
[[1 2 3]
 [4 5 6]]
 
[[1 2]
 [3 4]
 [5 6]]
"""

y = np.array([[1, 2, 3], [4, 5, 6]])
print(y)
y = y.reshape(3, 2, order="F")
print(y)
"""
[[1 2 3]
 [4 5 6]]
 
[[1 5]
 [4 3]
 [2 6]]
"""