# author : LJM - Jeson
# Email  : 878665865@qq.com
# coding : utf - 8
'''
多进程适合于CPU密集型操作（cpu操作指令比较多，比如科学计算，位数多的浮点运算）

多线程适合于IO密集型操作（读写数据操作较多的，比如爬虫）

线程是并发，进程是并行；进程之间相互独立，是系统分配资源的最小单位，同一个进程中的所有线程共享资源。

进程：一个运行的程序或者代码就是一个进程，一个没有运行的代码叫做程序。进程是系统进行资源分配的最小单位，进程拥有自己的内存空间，所以进程
    间数据不共享，开销大。
线程：是调度执行的最小单位，也叫执行路径，不能独立存在，依赖进程的存在而存在，一个进程至少有一个线程，叫主线程。多个
    线程共享内存。（数据共享和全局变量），因此提升程序的运行效率。
协程：用户态的轻量级线程，调度有用户控制，拥有自己的寄存器上下文和栈，切换基本没有内核切换的开销，切换灵活。

1. 什么是进程？
进程是程序的一次动态执行过程。每个进程都拥有自己的地址空间、内存、数据栈以及其他用于跟踪执行的辅助数据。
操作系统负责其上所有进程的执行，操作系统会为这些进程合理地分配执行时间。

2. 什么是线程？
线程是操作系统能够调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。
一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发执行多个线程，每条线程并行执行不同的任务。
一个线程是一个execution content（执行上下文），即一个cpu执行时所需要的一串指令。

假如你正在读一本书，没有读完，你想休息一下，但是你想在回来时恢复到当时你读的具体进度。
有一个方法就是记录下页数、行数与字数这三个值，这些数值就是 excution content。
如果你的室友在你休息的时候，使用相同的方式读这本书。
你和他只需要这三个数字记下来，就可以在交替的时间共同阅读这本书了。

线程的工作方式与此类似，cpu会给你一个在同一时间能够做多个运算的幻觉，实际上他在每一个运算上只是花了极少的时间。
本质上，cpu同一时刻只干了一件事。他能这样做就是因为他有每个运算的 execution content。（执行上下文）
就像你能够和你朋友共享同一本书一样，多任务也能共享一块 CPU。

3. 什么是主线程？
主线程就是创建进程中产生的第一个线程，也就是main函数对应的线程。

4. 线程ID
线程是一个轻量级进程，每一个用户态的线程，在内核中都对应一个调度实体，也拥有着自己的进程描述符。
tgid：线程组ID，线程组中的每一个线程的tgid都是相同的，在外表现为进程ID，他等于主线程的ID
tid：每一个线程在自己的用户层面上都有一个私有的pid，可以通过tid找到自己的虚拟地址，再通过页表映射到物理地址
空间。

5. 多线程：
操作系统通过给不同的线程分配时间片（CPU运行时长）来调度线程，当CPU执行完一个线程的时间片后就会快速切换到下一个
线程，时间片很短而且切换速度很快，以至于用户根本察觉不到。早期的计算机是单核单线程的。使用多线程的目的：充分利用
资源，达到程序的高效执行！

6. GIL锁 -- Global Interpreter Lock（全局解释器锁）
GIL是什么呢？仍然是用篮球比赛的例子来帮助理解：把篮球场看作是CPU，一场篮球比赛看作是一个线程，如果只有一个篮球场，
多场比赛要排队进行，就是一个简单的单核多线程的程序：如果有多块篮球场，多场比赛同时进行，就是一个简单的多核多线程的
程序。然而Python有着特别的规定：每场比赛必须要在裁判的监督下才允许进行，而裁判只有一个。这样不管你有几块篮球场，
同一时间只允许有一个场地进行比赛，其他场地都被闲置，其它比赛都只能等待！GIL锁其实就相当于那个锁！
加锁的目的，保证数据的安全性。

7. Python的线程  --- 伪线程，不是真正的线程，因为每个线程还带着锁的！这个锁在其他语言当中称为线程同步。所谓
线程同步是，我这个线程做的时候，别人不能进来，等我做完了之后，别人才能进来！有点类似于排着队进来！
Python的 GIL锁跟运算量和阻塞时间有关，python线程只要拿到cpu执行权，就默默地为cpu资源上一把锁[全局共享锁]，
其他线程都进不去了，只能等待着。只有阻塞的时候，才会往外交锁！正常情况下是不应该有这把锁的，所以我们通常把
Python的线程称为伪线程！

8. 伪线程缺点：保证了数据的安全，但是它的执行效率降低了。这是Python遗留的后遗症，因此，Python执行的时候，
会存在一定的效率的问题。据说，在 python3.8,该后遗症就被彻底根除了！但是，据说在Python3.7之前都没解决，
尽管Python3.7就想把它给根治了，但是最终还是没有搞定，哈哈···因此，官方说，期待3.8解决此问题···
在某种情况下，释放该锁，效率就会提高，但是数据的安全性[数据的正确性]就不能保证了。哪种情况下？第一：睡眠
时间拉长了，第二数据量增大了，大到多少？没有明确的值！

'''
