# author : LJM - Jeson
# Email  : 878665865@qq.com
# coding : utf - 8

"""
位：二进制位

常用的进制：
二进制：0 1
八进制：0~7
十进制：0 ~9
十六进制：0 ~f

10 十进制
字节：
0000 1 0 1 0 ==》 10
     8 4 2 1

计算机运算：
原码
反码
补码：负数
负数的十进制 ==》 二进制：
-3 的二进制：
步骤：
1. 找 3 的二进制码：0000 0011
2. 求第一步的反码： 1111 1100
3. 补码（反码 + 1） ：    1111 1101

二进制 ==》 十进制
首先看符号位(二进制第一位)
1 --》 负数
0 --》 正数

1111 0000 --》 16

步骤：
1. 补码（反码 + 1）：1111 0000
2. 反码：1110 1111
3. 正数：0001 0000 ——》 16
4. -16

练习：
方法一：
1001 0011 ——》 十进制 负数
减 1： 1001 0010
取反： 0110 1101 （正数对应的二进制数）
——》 - 109

方法二：
1110 1101（符号位不变，其余位按位取反末位加 1）

十六进制表示：
内存：0x356faa4545
颜色：f0f
AF --》 十进制
15 * 1 + 10 * 16 = 175
"""

# 二进制表示
a = 0b00001001

# 转十进制
b = int(a)
print(b)

# 转八进制
c = oct(a)
print(c)

# 转十六进制
d = hex(a)
print(d)

# 十进制 --》 二进制
e = 88
e = bin(e)
print(e)

result = int('0b1011000', base=2) # base表示给的字符串是什么进制
print(result)

"""
位运算：
& | ~ ^ >> <<

<<：变大
>>: 变小
"""

a = 2  # 0010
b = 3  # 0011

# 与运算
print(a & b)

# 或运算
print(a | b)

# 非运算
print(~ a)  # 0000 0010 --》1111 1101 十进制：1000 0011 --》 十进制：-3

# 异或
print(a ^ b)

# 右移
a = 21
print(a >> 2) # 21 >> 2 《=》 21 // 2^2

# 例如：56 >> 3
a = 56
print(56 >> 3, 56 // 8)  # 7 7

# 临界值
print(0 >> 6)  # 0000 0000
print(-1 >> 6)  # 1111 1111

# 左移:  <<
a = 1
print(a << 2)
