# author : LJM - Jeson
# Email  : 878665865@qq.com
# coding : utf - 8
'''
match
fullmatch
seach
    。若在字符串中找到匹配的，则不会继续查找了，如果想要继续找下去，怎么办呢？  用 findall
findall
特殊字符：
    。'.' 任意字符除了换行
    。[]表示的是一个范围
        。如果比较短 [xyz] 表示或者是 x或者是 y或者是 z
        。如果比较长 [a-zA-Z] 表示 a-z或者 A-Z之间的任意一个字符
        。如果有数字 [0-9] 表示 0-9 之间的任意一个数字

        # 思考：如何表示多个字母或者数字呢？
    * 表示 >= 0 个字符
    + 表示 >= 1 个字符
    ？ 表示 0 或 1 个字符
    {n} 表示固定几位, 例如：[0-9]{6}表示 6位数字，\w{6}表示任意的 6位字母、数字、下划线 [例如：_admin符合正则]
    {n,} 表示 >= n位 \d{6,} 表示 6位数字以上，包含 6位 [例如：123456符合正则]
    {n, m} 表示 >= n, 且 <= m位

    注意：{n,m} n和m之间一定不能留有空格！！！

    预定义字符：
    \d[digit] ~ 0-9
    \D ~ [^\d] 即：非 0-9
    \w ~ [a-zA-Z0-9_]
    \W ~ [^\w] 即：除了字母、数字、下划线的其他所有的
    \s[space]~ 空白字符
    \b[boundary] ~ 边界字符

    注意：只要用以上内容，即在写正则表达式的时候，要在前面增加 r, 保证里面的内容是正则内容！
'''
# 思考：如果两头是数字，中间是字母（可以是多个，但至少要有一个）  --- 1daf9
import re

s = '6yu89klop0'
match_obj = re.search('[0-9][a-z]+[0-9]', s)  # 两头是数字，中间是字母，且至少有一个 -- 6yu8
if match_obj:
    print(match_obj.group())  # 返回匹配内容

else:
    print('没有找到！')

# 思考：search()的特点是找到一个匹配的便不会再继续往下找了，如果我想继续找，怎么办呢？

res = re.findall('[0-9][a-z]+[0-9]', s)
print(res)  # ['6yu8', '9klop0']  --- 结果为list，因此不能用group了  --- ['6yu8', '9klop0']

print('=' * 50)
# 验证qq号码是否是正确的号码  1. 不能是0开头 2. 必须是数字 3. 5-10位数字
# 实现方式一：
qq = input('输入qq号码：')
# 因为要将整个qq号码，跟正则进行匹配
match_obj = re.fullmatch('[1-9]\d{4,9}', qq)  # \d等同于0-9, 思考：如何表示5-10位呢？
if match_obj:
    print(match_obj.group())  # 返回匹配内容

else:
    print('qq号码输入格式不正确！')

# 实现方式二：^ 表示开头，$ 表示结尾
# # 验证qq号码是否是正确的号码  1. 不能是0开头 2. 必须是数字 3. 5-10位数字
# qq = input('输入qq号码：')
# # 因为要将整个qq号码，跟正则进行匹配
# match_obj = re.search('^[1-9]\d{4,9}$', qq)  # \d等同于0-9, 思考：如何表示5-10位呢？
# if match_obj:
#     print(match_obj.group())  # 返回匹配内容
#
# else:
#     print('qq号码输入格式不正确！')

# 思考：如何验证用户名？可以是字母、数字、下划线，不能是数字或者下划线开头，而且用户名长度必须6位以上！