# author : LJM - Jeson
# Email  : 878665865@qq.com
# coding : utf - 8
'''
元类：定义一个类，继承 tpye
单例：一种设计模式，应用该设计模式的类只会生成一个实例
装饰器：采用装饰器，想让哪个类变成单例，直接装饰即可。

总结：
面向对象：
    。类 ---> 类别
        。 int str list ···
    。定义类的格式
        class 类名(object):  # 所有类默认继承 object
            pass
    。创建对象
        。对象 = 类名(参数, ···)
    。属性和方法
        。属性
            。对象属性和类属性
                。对象属性只能用自己的，而类属性，如果对象属性里面没有，可以用类里面的类属性[类属性比较无私]
                。对象属性使用对象调出，而类属性既可以使用对象调出，亦可以使用类调出
        。方法
            。普通方法
                def 方法名(self,参数···):  # 必须带有self, 哪个对象调, self就表示哪个对象本身
                    pass
                可以使用对象属性和方法
                    。self.属性名
                    。self.方法名()
            。类方法
                。装饰器 @classmethod
                。格式
                    @classmethod
                    def 方法名(cls):  --> cls 类对象
                        pass
            。静态方法
                。装饰器 @staticmethod
                。格式
                    @staticmethod
                    def 方法名():  # 里面不需要任何参数
                        pass

            。类方法和静态方法很类似
                。均可以使用类名.方法()调用，只不过类方法需要传参，而静态方法

            。魔术方法
                。__init__(sef): 属性的初始化
                。__new__(cls): 创建实例化对象
                。__call__
                。__str__
                。__del
                。__gt__
                。__lt__
                。__eq__

    。私有化：
        。创建
            。__属性名
            。__方法名()
            。_类名__属性名(方法名)
            只能在类中使用，不能在类外部使用

        。封装
            。私有化属性，并定义 set和 get方法
                。set方法复制  set_xxx(self, xxx)
                。get 方法取值 get_xxx(self): return xxx

                @property 属性应用，方便使用者

        。继承
            。目的：简化代码，提高可读性
            。怎么实现继承？
                class 类名(父类):
                    pass
                继承的是父类的非私有属性和方法

            。重写
                父类的方法不能满足子类的需求，在子类中去定义一个跟父类相同名字(参数也要一致)的方法

            。在子类中调用父类
                。方法一：父类名.方法名(self)
                。方法二：super(子类名, self).方法名()
            。has a
                。定义类的对象可以作为参数传递

        。多态
            。伪多态
                def aaa(self, pet):
                    pass

        。补充：类装饰器，元类 type，单例模式

 '''
