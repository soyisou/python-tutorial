# author : LJM - Jeson
# Email  : 878665865@qq.com
# coding : utf - 8
'''
函数式编程：
面向对象编程：
['京A888', time, pos, color, 品牌]
借书：张三-红楼梦 作者信息 出版社信息 价格信息

面向对象：
    。世界万物皆对象

列如：将大象放进冰箱
    。面向过程：（思维）
        。step1：打开冰箱门
        。step2：将大象放入冰箱
        。step3：关闭冰箱门
    。面向对象：（思维）
        。先考虑对象
            。冰箱  -- 冰箱类
            。大象  -- 大象类

            思考：先有类，还是先有对象？

需求 ——> 架构师搭建空间 ——> 提取类
需求：学生借书
    。大一
    。大二
    。大三
    。大四
    。男
    。女

    以上均是学生类！ --> 类别：学生类
        。特点 姓名 班级 学号 ···
        。动作 借书 还书 ···

    学生类怎么提取出来的？
        。学生对象 1 --》具体 --》姓名，性别，年龄，学号，年级等
        。学生对象 2 --》具体 --》姓名，性别，年龄，学号，年级等
        。学生对象 3 --》具体 --》姓名，性别，年龄，学号，年级等
        。学生对象 4 --》具体 --》姓名，性别，年龄，学号，年级等

        将以上共同特征提取出来

开发步骤：需求 --》定义类 --》提取对象特征和动作 --》封装到类中

Python中类定义的格式：
class 类名：
    特征：
        属性(也叫作字段)
            。类属性
            。对象属性
    动作：
        方法

类名：
    。首字母大写
    。多个单词，遵守驼峰式命名
'''
# 学生借书
# 类：抽象概念
class Student:
    # 属性：特征
    name = '匿名'
    sno = '001'
    clazz = '301'
    books = []
    age = 18
    gender = '男'

    # 方法: 动作
    def sign_in(self):
        print('我打卡啦！')

    def study(self):
        print('学习中···')

# book类：抽象
class Book:
    # 属性
    bname = '红楼梦'
    author = '曹雪芹'
    publish = '人民教育出版社'
    price = 100
    bno = '1546434100'

    #方法
    # 减少书籍
    def reduce_book(self):
        print('借出一本书')

    def increase_book(self):
        print('增加一本书')