import numpy as np
import pandas as pd

# 通过创建一个numpy array "时间索引以及列标签来创建一个DataFrame"
dates = pd.date_range('20210101', periods=6)
print(dates)
"""
DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04',
               '2021-01-05', '2021-01-06'],
              dtype='datetime64[ns]', freq='D')
"""

df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD'))
print(df)
"""
                   A         B         C         D
2021-01-01 -0.191380  0.112252  0.978421  1.037979
2021-01-02 -2.266581  0.573461 -0.924300 -0.685251
2021-01-03  1.167858 -0.409036 -0.333974 -1.056777
2021-01-04 -0.219734  0.909388  0.254975 -0.035617
2021-01-05  1.334830 -0.181348  1.018916  0.311342
2021-01-06  1.549524 -0.427642 -1.450736 -0.979574
"""

# 1. 查找DataFrame中的头部和尾部的行
print(df.head())
"""
                   A         B         C         D
2021-01-01 -0.191380  0.112252  0.978421  1.037979
2021-01-02 -2.266581  0.573461 -0.924300 -0.685251
2021-01-03  1.167858 -0.409036 -0.333974 -1.056777
2021-01-04 -0.219734  0.909388  0.254975 -0.035617
2021-01-05  1.334830 -0.181348  1.018916  0.311342
"""
print(df.tail(3))
"""
                   A         B         C         D
2021-01-04 -0.219734  0.909388  0.254975 -0.035617
2021-01-05  1.334830 -0.181348  1.018916  0.311342
2021-01-06  1.549524 -0.427642 -1.450736 -0.979574
"""

# 2. 显示索引、列和底层中的numpy数据
print(df.index)
"""
DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04',
               '2021-01-05', '2021-01-06'],
              dtype='datetime64[ns]', freq='D')
"""

# 列
print(df.columns) # Index(['A', 'B', 'C', 'D'], dtype='object')

# 值
print(df.values)
"""
[[-0.18937822  2.04432722  0.62717821  1.09388356]
 [ 0.21841185  1.16301396  0.97997408  0.63902494]
 [-0.7885576  -0.66614568  0.40741184  1.18632267]
 [ 0.63495901 -0.20123569  0.54292579 -1.72566508]
 [ 1.24886054 -0.10715033  0.07522774 -0.71281436]
 [ 1.55920735  0.19077858 -1.16218708 -0.32729334]]
"""

# 3. describe()函数对于数据的快速统计汇总
print(df.describe())
"""
              A         B         C         D
count  6.000000  6.000000  6.000000  6.000000
mean   0.404481 -0.215684  0.781961  0.110339
std    1.232205  1.299978  0.695459  0.854755
min   -1.095644 -1.603899 -0.494707 -1.163782
25%   -0.462621 -1.300932  0.804886 -0.451697
50%    0.410528 -0.199482  0.882630  0.590360
75%    0.963697  0.445854  0.981224  0.665287
max    2.307058  1.715877  1.628156  0.753884
"""

# 4. 对数据的转置
print(df.T)
"""
   2021-01-01  2021-01-02  2021-01-03  2021-01-04  2021-01-05  2021-01-06
A   -1.095644    1.072952    0.635930    0.185126   -0.678536    2.307058
B    0.437908   -1.603899   -0.836872   -1.455619    1.715877    0.448502
C   -0.494707    1.009386    0.783673    0.868524    0.896735    1.628156
D    0.599240    0.753884   -0.796090    0.687302   -1.163782    0.581481
"""

# 5. 按轴进行排序
print(df.sort_index(axis=1, ascending=False))
"""
                   D         C         B         A
2021-01-01  0.662837  0.315656  0.861744  0.000646
2021-01-02 -0.859514 -2.093257 -0.939097 -0.393058
2021-01-03  1.239855  0.723205 -0.105865  2.072970
2021-01-04  1.690764 -0.084824 -0.225023 -0.709201
2021-01-05  0.469052 -0.461556 -0.284537 -1.324483
2021-01-06 -1.328222  0.068926  1.095961  0.493689
"""

# 6. 按值进行排序
print(df.sort_values(by='B')) # 默认升序
"""
                   A         B         C         D
2021-01-03  0.021166 -1.214478 -0.285004  0.764514
2021-01-04 -0.244912 -0.540125 -0.181592  0.827657
2021-01-01  2.343820 -0.537184  0.557119 -0.515892
2021-01-06 -1.660397 -0.494119  0.561530 -1.461698
2021-01-05 -1.214156 -0.434463  0.525097  0.944625
2021-01-02  0.318433 -0.281610  0.957308 -1.546274
"""
