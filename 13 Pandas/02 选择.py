"""
虽然标准的Python/Numpy的选择和设置表达式都能够直接派上用场，但是作为工程使用的代码，我们推荐使用经过优化的
pandas数据访问方式: .at, .iat, .loc, .iloc和.ix
"""
import numpy as np
import pandas as pd

# 通过创建一个numpy array "时间索引以及列标签来创建一个DataFrame"
dates = pd.date_range('20210101', periods=6)
# print(dates)
"""
DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04',
               '2021-01-05', '2021-01-06'],
              dtype='datetime64[ns]', freq='D')
"""

df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=list('ABCD'))
print(df)

"""
获取
"""
# 1. 选择一个单独的列，这将会返回一个Series, 等同于df.A
print(df.A)
"""
2021-01-01   -0.034682
2021-01-02    0.015543
2021-01-03   -0.545396
2021-01-04   -0.621958
2021-01-05   -1.373683
2021-01-06   -0.115954
Freq: D, Name: A, dtype: float64
"""

print(df['A']) # 等同df.A
"""
2021-01-01   -0.034682
2021-01-02    0.015543
2021-01-03   -0.545396
2021-01-04   -0.621958
2021-01-05   -1.373683
2021-01-06   -0.115954
Freq: D, Name: A, dtype: float64
"""

# 2. 通过[]进行选择，这将会对行进行切片
print(df[0:3])
"""
                   A         B         C         D
2021-01-01 -0.361824  1.552457 -1.246220 -1.622769
2021-01-02 -0.287164 -0.561284 -0.655589  1.585612
2021-01-03 -0.196039  2.373193 -0.032537  1.904079
"""

print(df['20210101': '20210103'])
"""
                   A         B         C         D
2021-01-01 -0.361824  1.552457 -1.246220 -1.622769
2021-01-02 -0.287164 -0.561284 -0.655589  1.585612
2021-01-03 -0.196039  2.373193 -0.032537  1.904079
"""

"""
通过标签选择
"""
# 1. 使用标签来获取一个交叉的区域
print(df.loc[dates[0]])
"""
A   -0.361824
B    1.552457
C   -1.246220
D   -1.622769
Name: 2021-01-01 00:00:00, dtype: float64
"""

# 2. 通过标签来在多个轴上进行选择
print(df.loc[:, ['A', 'B']])
"""
                   A         B
2021-01-01 -0.311600  0.817982
2021-01-02 -1.052813  0.544949
2021-01-03 -0.544098 -0.625272
2021-01-04 -0.358702 -0.012577
2021-01-05 -1.598628 -0.914469
2021-01-06  0.784202 -0.078660
"""

# 3. 标签切片
print(df.loc['20210104': '20210106', ['A', 'B']])
"""
                   A         B
2021-01-04 -1.536773  0.403903
2021-01-05  0.799935 -0.242584
2021-01-06  0.403455 -0.774477
"""

# 4. 对于返回的对象进行维度缩减
print(df.loc['20210104', ['A', 'B']])
"""
A    0.584576
B   -0.540990
Name: 2021-01-04 00:00:00, dtype: float64
"""

# 5. 获取一个标量
print(df.loc[dates[0], 'A']) # 1.0796680583738247

# 6. 快速访问一个标量（与上一个方法等价）
print(df.at[dates[0], 'A']) # 1.0796680583738247

"""
通过位置选择
"""
# 1. 通过传递数值进行位置选择（选择的是行）
print(df.iloc[3])
"""
A    2.017011
B   -0.056470
C   -2.306118
D   -0.771284
Name: 2021-01-04 00:00:00, dtype: float64
"""

# 2. 通过数值进行切片，与numpy/python中的情况类似
print(df.iloc[3:5, 0:2])
"""
                   A         B
2021-01-04 -1.259403  0.180058
2021-01-05  0.128684  0.176593
"""

# 3. 通过指定一个位置的列表，与numpy/python中的情况类似
print(df.iloc[[1, 2, 4], [0, 2]])
"""
                   A         C
2021-01-02  0.360907 -1.045839
2021-01-03  1.206985 -0.624210
2021-01-05  1.040323  0.411694
"""
